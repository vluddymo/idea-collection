{"version":3,"sources":["utils/ideas-utils.js","components/IdeaCard/IdeaCard.jsx","components/AddIdeaDialog/AddIdeaDialog.jsx","App.js","serviceWorker.js","index.js"],"names":["a","fetch","response","json","useStyles","makeStyles","root","margin","maxWidth","backgroundColor","IdeaCard","idea","classes","description","AddIdeaDialog","open","handleClose","onAdd","useState","setDescription","addStatus","setAddStatus","handleSubmit","method","headers","body","JSON","stringify","then","status","Error","putIdea","catch","Dialog","onClose","aria-labelledby","fullWidth","DialogTitle","id","DialogContent","DialogContentText","onSubmit","TextField","multiline","label","value","onChange","event","target","error","length","helperText","CircularProgress","Typography","variant","component","DialogActions","Button","onClick","color","disabled","App","ideas","setIdeas","showAddDialog","setShowAddDialog","useEffect","fetchAllIdeas","data","className","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.82d73c2f.chunk.js","sourcesContent":["export async function fetchAllIdeas() {\n    const response = await fetch('/api/ideas');\n    return await response.json();\n}\n\n\nexport function putIdea(description) {\n    return fetch(\"/api/ideas\", {\n        method: \"PUT\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({description: description})\n    }).then(response => {\n        if (response.status !== 200) {\n            throw new Error(\"invalid response\");\n        }\n\n        return response.json()\n    });\n}\n","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n    root: {\n        margin: 10,\n        maxWidth: 350,\n        backgroundColor: \"lightgray\",\n        \"&:hover\": { \n            backgroundColor: 'rgb(7, 177, 77, 0.42)' \n        } \n    },\n});\n\nfunction IdeaCard({idea}) {\n    const classes = useStyles()\n    return (\n        <Card className={classes.root}>\n            <CardContent>\n                <Typography variant=\"body1\" component=\"p\">\n                    {idea.description}\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default IdeaCard;\n","import React, {useState} from \"react\";\nimport {putIdea} from \"../../utils/ideas-utils\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default function AddIdeaDialog({open, handleClose, onAdd}) {\n    const [description, setDescription] = useState(\"\");\n    const [addStatus, setAddStatus] = useState();\n\n    function handleSubmit() {\n        setAddStatus(\"PENDING\")\n        putIdea(description)\n            .then((idea) => {\n                handleClose();\n                setDescription(\"\");\n                onAdd(idea);\n                setAddStatus(\"SUCCESS\")\n            }).catch(() => {\n            setAddStatus(\"FAILED\")\n        });\n\n    }\n\n    function handleChange(event) {\n        setDescription(event.target.value);\n    }\n\n    return (\n        <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" maxWidth={\"sm\"} fullWidth={true}>\n            <DialogTitle id=\"form-dialog-title\">Add Idea</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Add your idea ;)\n                </DialogContentText>\n                <form onSubmit={handleSubmit}>\n                    <TextField\n                        fullWidth={true}\n                        multiline={true}\n                        label=\"Description\"\n                        value={description}\n                        onChange={handleChange}\n                        margin=\"normal\"\n                        error={description.length < 5}\n                        helperText={\"min length 5\"}\n                    />\n                </form>\n                {addStatus === 'PENDING' && <CircularProgress />}\n                {addStatus === 'FAILED' &&  <Typography variant=\"body1\" component=\"p\">\n                  Add idea failed\n                </Typography>}\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleClose} color=\"primary\">\n                    Cancel\n                </Button>\n                <Button disabled={description.length < 5} onClick={handleSubmit} color=\"primary\">\n                    Add\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {fetchAllIdeas} from \"./utils/ideas-utils\";\nimport IdeaCard from \"./components/IdeaCard/IdeaCard\";\nimport Button from \"@material-ui/core/Button\";\nimport AddIdeaDialog from \"./components/AddIdeaDialog/AddIdeaDialog\";\n\nfunction App() {\n\n    const [ideas, setIdeas] = useState([]);\n    const [showAddDialog, setShowAddDialog] = useState(false);\n\n\n    useEffect(() => {\n        fetchAllIdeas().then(data => setIdeas(data))\n    }, []);\n\n\n    return (\n        <div className={\"app\"}>\n            <Button variant=\"outlined\" color=\"primary\" onClick={() => setShowAddDialog(true)}>\n                Add Idea\n            </Button>\n\n            <AddIdeaDialog open={showAddDialog}\n                           handleClose={() => setShowAddDialog(false)}\n                           onAdd={(idea) => setIdeas([...ideas, idea])}\n            />\n            {ideas.map((idea) => <IdeaCard key={idea.id} idea={idea}/>)}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}